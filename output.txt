Dockerfile.frontend:

# Dockerfile.frontend

FROM node:18

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY frontend/package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the frontend code
COPY frontend/ ./

# Expose the port the app runs on
EXPOSE 3000

# Start the frontend application
CMD ["npm", "start"]

Dockerfile.backend:

# Dockerfile.backend

FROM python:3.10

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy the backend code
COPY backend/ ./

# Expose the backend port
EXPOSE 5001

# Start the backend application using SocketIO
CMD ["python", "app.py"]

docker-compose.yml:

# docker-compose.yml

version: "3.8"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3001:3000" # Host:Container
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - PORT=3000
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app
    environment:
      - PORT=5001
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

backend/app.py:

# backend/app.py

import eventlet
eventlet.monkey_patch()

from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO, join_room, leave_room, emit
import uuid
import logging
import json
import os
import threading

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Initialize extensions
CORS(app, resources={r"/*": {"origins": "http://57.129.44.194:3001"}})
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet')

# Path to the JSON file
SCORES_FILE = 'scores.json'

# Lock for thread-safe file operations
file_lock = threading.Lock()

# Initialize scores.json if it doesn't exist
if not os.path.exists(SCORES_FILE):
    with open(SCORES_FILE, 'w') as f:
        json.dump([], f)
    logger.info("Created scores.json file.")

# In-memory structures
rooms = {}        # room_id: [player1_sid, player2_sid]
player_moves = {} # room_id: {sid: move}

def read_scores():
    with file_lock:
        try:
            with open(SCORES_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error reading scores.json: {e}")
            return []

def write_scores(scores):
    with file_lock:
        try:
            with open(SCORES_FILE, 'w') as f:
                json.dump(scores, f, indent=4)
            logger.info("Scores.json updated.")
        except Exception as e:
            logger.error(f"Error writing scores.json: {e}")

@app.route('/leaderboard', methods=['GET'])
def get_leaderboard():
    try:
        scores = read_scores()
        sorted_leaderboard = sorted(scores, key=lambda x: x['score'], reverse=True)
        return jsonify(sorted_leaderboard)
    except Exception as e:
        logger.error(f"Error fetching leaderboard: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/submit', methods=['POST'])
def submit_score():
    try:
        data = request.json
        name = data.get('name', 'Anonymous')
        score = data.get('score', 0)

        scores = read_scores()

        # Update or add score
        for entry in scores:
            if entry['name'] == name:
                if score > entry['score']:
                    entry['score'] = score
                    write_scores(scores)
                    logger.info(f"Updated score for {name}: {score}")
                break
        else:
            scores.append({'name': name, 'score': score})
            write_scores(scores)
            logger.info(f"Added score for {name}: {score}")

        # Emit updated leaderboard
        sorted_leaderboard = sorted(scores, key=lambda x: x['score'], reverse=True)
        socketio.emit('leaderboard_updated', {'leaderboard': sorted_leaderboard})

        return jsonify({'message': 'Score submitted successfully'}), 200
    except Exception as e:
        logger.error(f"Error in submit_score: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@socketio.on('connect')
def handle_connect():
    logger.info(f"Client connected: {request.sid}")
    try:
        scores = read_scores()
        sorted_leaderboard = sorted(scores, key=lambda x: x['score'], reverse=True)
        emit('leaderboard_updated', {'leaderboard': sorted_leaderboard}, room=request.sid)
        logger.info(f"Sent leaderboard to {request.sid}")
    except Exception as e:
        logger.error(f"Error on connect: {e}")

@socketio.on('find_match')
def handle_find_match():
    logger.info(f"Client {request.sid} is looking for a match.")
    # Find a room with one player
    for room_id, players in rooms.items():
        if len(players) == 1:
            players.append(request.sid)
            join_room(room_id)
            emit('match_found', {'room': room_id}, room=room_id)
            logger.info(f"Match found in room {room_id} for players {players}")
            return
    # Create new room
    room_id = str(uuid.uuid4())
    rooms[room_id] = [request.sid]
    player_moves[room_id] = {}
    join_room(room_id)
    emit('waiting', {'message': 'Waiting for an opponent...'}, room=request.sid)
    logger.info(f"Created room {room_id} for player {request.sid}")

@socketio.on('make_move')
def handle_make_move(data):
    try:
        room_id = data.get('room')
        move = data.get('move')
        logger.info(f"Player {request.sid} in room {room_id} made move: {move}")

        if room_id in rooms:
            player_moves[room_id][request.sid] = move
            emit('move_received', {'player': request.sid, 'move': move}, room=room_id, include_self=False)
            logger.info(f"Moves in room {room_id}: {player_moves[room_id]}")
            if len(player_moves[room_id]) == 2:
                player1, player2 = rooms[room_id]
                move1 = player_moves[room_id][player1]
                move2 = player_moves[room_id][player2]
                result1, result2 = determine_result(move1, move2)

                # Emit results
                emit('game_result', {'your_move': move1, 'opponent_move': move2, 'result': result1}, room=player1)
                emit('game_result', {'your_move': move2, 'opponent_move': move1, 'result': result2}, room=player2)

                # Clear moves
                player_moves[room_id] = {}
        else:
            emit('error', {'message': 'Invalid room ID'}, room=request.sid)
            logger.warning(f"Invalid room {room_id} by {request.sid}")
    except Exception as e:
        logger.error(f"Error in make_move: {e}")

@socketio.on('disconnect')
def handle_disconnect():
    logger.info(f"Client disconnected: {request.sid}")
    # Remove from any room
    for room_id, players in list(rooms.items()):
        if request.sid in players:
            players.remove(request.sid)
            leave_room(room_id)
            logger.info(f"Removed {request.sid} from room {room_id}")
            if not players:
                del rooms[room_id]
                del player_moves[room_id]
                logger.info(f"Deleted empty room {room_id}")
            else:
                emit('opponent_left', {'message': 'Opponent has left the game.'}, room=room_id)
                del player_moves[room_id]
                logger.info(f"Room {room_id} has remaining players: {players}")
            break

def determine_result(move1, move2):
    rules = {'Rock': 'Scissors', 'Paper': 'Rock', 'Scissors': 'Paper'}
    if move1 == move2:
        return ('Draw!', 'Draw!')
    elif rules.get(move1) == move2:
        return ('You Win!', 'You Lose!')
    else:
        return ('You Lose!', 'You Win!')

if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5001, debug=True)

backend/requirements.txt:

Flask>=2.2.5
Flask-Cors>=3.0.10
Flask-SocketIO>=5.3.3
eventlet>=0.33.0
frontend/src/App.js:

// frontend/src/App.js

import React, { useState, useEffect } from 'react';
import './App.css';
import { io } from 'socket.io-client';

const SOCKET_SERVER_URL = 'http://57.129.44.194:5001'; // Update as necessary

function App() {
  const [gameState, setGameState] = useState('menu'); // 'menu', 'mode_selection', 'waiting', 'game', 'gameover'
  const [playerChoice, setPlayerChoice] = useState(null);
  const [opponentChoice, setOpponentChoice] = useState(null);
  const [result, setResult] = useState('');
  const [leaderboard, setLeaderboard] = useState([]);
  const [name, setName] = useState('');
  const [hasSubmittedScore, setHasSubmittedScore] = useState(false);
  const [isOnline, setIsOnline] = useState(false);
  const [socket, setSocket] = useState(null);

  // Initialize socket connection
  useEffect(() => {
    const newSocket = io(SOCKET_SERVER_URL);
    setSocket(newSocket);

    newSocket.on('connect', () => {
      console.log('Connected to backend');
    });

    newSocket.on('leaderboard_updated', (data) => {
      setLeaderboard(data.leaderboard);
    });

    newSocket.on('match_found', ({ room }) => {
      setIsOnline(true);
      setGameState('game');
      console.log(`Match found in room ${room}`);
    });

    newSocket.on('waiting', () => {
      setGameState('waiting');
      console.log('Waiting for opponent...');
    });

    newSocket.on('game_result', (data) => {
      setPlayerChoice(data.your_move);
      setOpponentChoice(data.opponent_move);
      setResult(data.result);
      setGameState('gameover');
      setHasSubmittedScore(false);
    });

    newSocket.on('opponent_left', (data) => {
      alert(data.message);
      resetGame();
    });

    newSocket.on('error', (data) => {
      alert(data.message);
      resetGame();
    });

    return () => {
      newSocket.disconnect();
    };
  }, []);

  // Fetch leaderboard on initial load
  useEffect(() => {
    fetchLeaderboard();
  }, []);

  const fetchLeaderboard = () => {
    fetch(`${SOCKET_SERVER_URL}/leaderboard`)
      .then((res) => res.json())
      .then((data) => setLeaderboard(data))
      .catch((err) => console.error('Error fetching leaderboard:', err));
  };

  const startGame = () => {
    setGameState('mode_selection');
  };

  const playAI = () => {
    setIsOnline(false);
    setGameState('game');
  };

  const playOnline = () => {
    if (socket) {
      socket.emit('find_match');
    }
  };

  const handleChoice = (choice) => {
    setPlayerChoice(choice);
    if (isOnline && socket) {
      socket.emit('make_move', { move: choice, room: socket.id }); // Assuming room ID is socket.id for simplicity
    } else {
      // Play against AI
      const aiChoices = ['Rock', 'Paper', 'Scissors'];
      const aiMove = aiChoices[Math.floor(Math.random() * 3)];
      setOpponentChoice(aiMove);
      const gameResult = determineResult(choice, aiMove);
      setResult(gameResult);
      setGameState('gameover');
    }
  };

  const determineResult = (player, opponent) => {
    if (player === opponent) return 'Draw!';
    if (
      (player === 'Rock' && opponent === 'Scissors') ||
      (player === 'Paper' && opponent === 'Rock') ||
      (player === 'Scissors' && opponent === 'Paper')
    ) {
      return 'You Win!';
    }
    return 'You Lose!';
  };

  const submitScore = () => {
    const score = result === 'You Win!' ? 1 : result === 'You Lose!' ? -1 : 0;
    const trimmedName = name.trim() || 'Anonymous';

    if (trimmedName !== 'Anonymous') {
      localStorage.setItem('playerName', trimmedName);
    }

    fetch(`${SOCKET_SERVER_URL}/submit`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name: trimmedName, score }),
    })
      .then((res) => res.json())
      .then((data) => {
        setHasSubmittedScore(true);
      })
      .catch((err) => console.error('Error submitting score:', err));
  };

  const resetGame = () => {
    setGameState('menu');
    setPlayerChoice(null);
    setOpponentChoice(null);
    setResult('');
    setHasSubmittedScore(false);
    setIsOnline(false);
  };

  const playAgain = () => {
    if (isOnline && socket) {
      socket.emit('find_match');
      setGameState('waiting');
    } else {
      setGameState('game');
      setPlayerChoice(null);
      setOpponentChoice(null);
      setResult('');
    }
  };

  const handleNameChange = (e) => {
    const newName = e.target.value;
    if (/^[A-Za-z0-9]{0,20}$/.test(newName)) {
      setName(newName);
    }
  };

  // Load name from localStorage on mount
  useEffect(() => {
    const storedName = localStorage.getItem('playerName');
    if (storedName) {
      setName(storedName);
    }
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <p>Player: {name || 'Anonymous'}</p>
      </header>

      <div className="App-content">
        {gameState === 'menu' && (
          <>
            <button onClick={startGame}>Start Game</button>
            {name && (
              <button
                onClick={() => {
                  localStorage.removeItem('playerName');
                  setName('');
                }}
              >
                Reset Name
              </button>
            )}
          </>
        )}

        {gameState === 'mode_selection' && (
          <>
            <h1>Select Mode</h1>
            <button onClick={playAI}>Versus AI</button>
            <button onClick={playOnline}>Versus Player</button>
            <button onClick={resetGame}>Back</button>
          </>
        )}

        {gameState === 'waiting' && (
          <>
            <h1>Waiting for an opponent...</h1>
            <button onClick={resetGame}>Cancel</button>
          </>
        )}

        {gameState === 'game' && (
          <>
            <h1>Choose Your Move</h1>
            <div className="choices">
              <button onClick={() => handleChoice('Rock')}>Rock</button>
              <button onClick={() => handleChoice('Paper')}>Paper</button>
              <button onClick={() => handleChoice('Scissors')}>Scissors</button>
            </div>
          </>
        )}

        {gameState === 'gameover' && (
          <>
            <h1>Game Over</h1>
            <p>You chose: {playerChoice}</p>
            <p>Opponent chose: {opponentChoice}</p>
            <p>{result}</p>
            {!hasSubmittedScore && (
              <>
                <input
                  type="text"
                  placeholder="Enter your name"
                  value={name}
                  onChange={handleNameChange}
                />
                <button onClick={submitScore}>Submit Score</button>
              </>
            )}
            {hasSubmittedScore && <p>Score submitted!</p>}
            <h2>Leaderboard</h2>
            <ul className="leaderboard">
              {leaderboard.map((entry, index) => (
                <li key={index}>
                  {entry.name}: {entry.score}
                </li>
              ))}
            </ul>
            <button onClick={playAgain}>Play Again</button>
            <button onClick={resetGame}>Main Menu</button>
          </>
        )}
      </div>
    </div>
  );
}

export default App;

frontend/src/App.css:

/* frontend/src/App.css */

/* Reset styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  height: 100vh;
}

.App {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.App-header {
  position: fixed;
  top: 0;
  width: 100%;
  background-color: #4CAF50;
  color: white;
  padding: 10px 0;
  text-align: center;
  font-size: 18px;
}

.App-content {
  margin-top: 60px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

button {
  margin: 10px;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  border: none;
  border-radius: 5px;
  background-color: #4CAF50;
  color: white;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #45a049;
}

button:disabled {
  background-color: #a5d6a7;
  cursor: not-allowed;
}

input {
  padding: 10px;
  font-size: 14px;
  margin: 10px 0;
  border: 1px solid #ccc;
  border-radius: 4px;
}

h1,
h2 {
  margin: 20px 0 10px 0;
}

.leaderboard {
  list-style-type: none;
  padding: 0;
  max-height: 200px;
  overflow-y: auto;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 10px;
}

.leaderboard li {
  padding: 5px 0;
  border-bottom: 1px solid #eee;
}

.leaderboard li:last-child {
  border-bottom: none;
}
